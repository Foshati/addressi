generator client {
  provider      = "prisma-client-js"
  tracing       = true
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String
  userId  String? @unique @db.ObjectId
  users   User?   @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  images    images?
  userLink  UserLink?
  profile   Profile?
}

model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  email      String   @unique
  username   String   @unique
  phone      String?
  city       String?
  country    String?
  occupation String?
  address    String?
  bio        String?
  gender     String?
  languages  String[]
  location   String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserLink {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  totalLinks Int      @default(0)
  createdAt  DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  links Link[]
}

model Link {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userLinkId  String   @db.ObjectId
  description String?
  url         String
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())

  userLink UserLink @relation(fields: [userLinkId], references: [id], onDelete: Cascade)
}
