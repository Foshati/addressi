generator client {
  provider      = "prisma-client-js"
  tracing       = true
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  images  Image?
  profile Profile?
  links   Link[]
}

model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  email      String   @unique
  username   String   @unique
  phone      String?
  city       String?
  country    String?
  occupation String?
  address    String?
  bio        String?
  gender     String?
  languages  String[]
  location   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Image {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.ObjectId
}

model Link {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  url         String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  clicks      Int      @default(0)
  isCustom    Boolean  @default(false)
  favicon     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId

  @@index([userId])
}
